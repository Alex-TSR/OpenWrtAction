#
# Copyright (c) 2019-2021 smallprogram
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/smallprogram/OpenWrtAction
# File: .github/workflows/Update_Checker.yml
# Description: Source code update checker
#

name: Update_Checker

env:
  REPO_URL_Lede: https://github.com/coolsnowwolf/lede
  REPO_BRANCH_Lede: master
  REPO_PATH_Lede : "lede"

  REPO_URL_HelloWorld: https://github.com/fw876/helloworld
  REPO_BRANCH_HelloWorld: master
  REPO_PATH_HelloWorld : "helloworld"

  REPO_URL_PassWall: https://github.com/xiaorouji/openwrt-passwall
  REPO_BRANCH_PassWall: main
  REPO_PATH_PassWall : "openwrt-passwall"

  REPO_URL_ThemeArgon: https://github.com/jerrykuku/luci-theme-argon
  REPO_BRANCH_ThemeArgon: master
  REPO_PATH_ThemeArgon : "luci-theme-argon"

  REPO_URL_ArgonConfig: https://github.com/jerrykuku/luci-app-argon-config
  REPO_BRANCH_ArgonConfig: master
  REPO_PATH_ArgonConfig : "luci-app-argon-config"

  REPO_URL_lua_maxminddb: https://github.com/jerrykuku/lua-maxminddb
  REPO_BRANCH_lua_maxminddb: master
  REPO_PATH_lua_maxminddb : "lua-maxminddb"

  REPO_URL_luci_app_vssr: https://github.com/jerrykuku/luci-app-vssr
  REPO_BRANCH_luci_app_vssr: master
  REPO_PATH_luci_app_vssr : "luci-app-vssr"

  REPO_URL_luci_app_dockerman: https://github.com/lisaac/luci-app-dockerman
  REPO_BRANCH_luci_app_dockerman: master
  REPO_PATH_luci_app_dockerman : "luci-app-dockerman"

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 0 */8 * * *

jobs:
  check:
    runs-on: ubuntu-latest

    steps:

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_Lede -b $REPO_BRANCH_Lede $REPO_PATH_Lede
        cd $REPO_PATH_Lede
        echo "::set-output name=commitHash_Lede::$(git rev-parse HEAD)"
        cd



        git clone --depth 1 $REPO_URL_HelloWorld -b $REPO_BRANCH_HelloWorld $REPO_PATH_HelloWorld 
        cd $REPO_PATH_HelloWorld
        echo "::set-output name=commitHash_HelloWorld::$(git rev-parse HEAD)"
        cd

        git clone --depth 1 $REPO_URL_PassWall -b $REPO_BRANCH_PassWall $REPO_PATH_PassWall
        cd $REPO_PATH_PassWall
        echo "::set-output name=commitHash_PassWall::$(git rev-parse HEAD)"
        cd

        git clone --depth 1 $REPO_URL_ThemeArgon -b $REPO_BRANCH_ThemeArgon $REPO_PATH_ThemeArgon
        cd $REPO_PATH_ThemeArgon
        echo "::set-output name=commitHash_ThemeArgon::$(git rev-parse HEAD)"
        cd

        git clone --depth 1 $REPO_URL_ArgonConfig -b $REPO_BRANCH_ArgonConfig $REPO_PATH_ArgonConfig 
        cd $REPO_PATH_ArgonConfig 
        echo "::set-output name=commitHash_ArgonConfig::$(git rev-parse HEAD)"
        cd

        git clone --depth 1 $REPO_URL_lua_maxminddb -b $REPO_BRANCH_lua_maxminddb $REPO_PATH_lua_maxminddb
        cd $REPO_PATH_lua_maxminddb
        echo "::set-output name=commitHash_lua_maxminddb::$(git rev-parse HEAD)"
        cd

        git clone --depth 1 $REPO_URL_luci_app_vssr -b $REPO_BRANCH_luci_app_vssr $REPO_PATH_luci_app_vssr
        cd $REPO_PATH_luci_app_vssr
        echo "::set-output name=commitHash_luci_app_vssr::$(git rev-parse HEAD)"
        cd

        git clone --depth 1 $REPO_URL_luci_app_dockerman -b $REPO_BRANCH_luci_app_dockerman $REPO_PATH_luci_app_dockerman
        cd $REPO_PATH_luci_app_dockerman
        echo "::set-output name=commitHash_luci_app_dockerman::$(git rev-parse HEAD)"
        cd

        echo "::set-output name=commitHash_All::$(commitHash_Lede + commitHash_HelloWorld + commitHash_PassWall + commitHash_ThemeArgon + commitHash_ArgonConfig + commitHash_lua_maxminddb + commitHash_luci_app_vssr + commitHash_luci_app_dockerman)"


    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash_All
        key: HEAD-${{ steps.getHash.outputs.commitHash_All }}
        # path: .commitHash_Lede
        # key: HEAD-${{ steps.getHash.outputs.commitHash_Lede }}
        # path: .commitHash_HelloWorld
        # key: HEAD-${{ steps.getHash.outputs.commitHash_HelloWorld }}
        # path: .commitHash_PassWall
        # key: HEAD-${{ steps.getHash.outputs.commitHash_PassWall }}
        # path: .commitHash_ThemeArgon
        # key: HEAD-${{ steps.getHash.outputs.commitHash_ThemeArgon }}
        # path: .commitHash_ArgonConfig
        # key: HEAD-${{ steps.getHash.outputs.commitHash_ArgonConfig }}
        # path: .commitHash_lua-maxminddb
        # key: HEAD-${{ steps.getHash.outputs.commitHash_lua-maxminddb }}
        # path: .commitHash_luci-app-vssr
        # key: HEAD-${{ steps.getHash.outputs.commitHash_luci-app-vssr }}
        # path: .commitHash_luci-app-dockerman
        # key: HEAD-${{ steps.getHash.outputs.commitHash_luci-app-dockerman }}
    
    - name: Show Commit Head
    run: |
        echo ${{ steps.getHash.outputs.commitHash_Lede }}
        echo ${{ steps.getHash.outputs.commitHash_All }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        echo ${{ steps.getHash.outputs.commitHash_HelloWorld }} | tee .commitHash_HelloWorld
        echo ${{ steps.getHash.outputs.commitHash_PassWall }} | tee .commitHash_PassWall
        echo ${{ steps.getHash.outputs.commitHash_ThemeArgon }} | tee .commitHash_ThemeArgon
        echo ${{ steps.getHash.outputs.commitHash_ArgonConfig }} | tee .commitHash_ArgonConfig
        echo ${{ steps.getHash.outputs.commitHash_lua_maxminddb }} | tee .commitHash_lua_maxminddb
        echo ${{ steps.getHash.outputs.commitHash_luci_app_vssr }} | tee .commitHash_luci_app_vssr
        echo ${{ steps.getHash.outputs.commitHash_luci_app_dockerman }} | tee .commitHash_luci_app_dockerman

        
        
    - name: Trigger build
      if: steps.cacheHash.outputs.cache-hit != 'true'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.OPENWRTACTION_TRIGGER }}
        event-type: Source Code Update

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1